<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
  ">

  <!-- This creates an embedded ActiveMQ Broker
  <broker xmlns="http://activemq.apache.org/schema/core" useJmx="true" persistent="false">
  <transportConnectors>
  <transportConnector uri="tcp://localhost:61616" />
</transportConnectors>
</broker> -->
<!-- Lets connect the Camel ActiveMQ component to the embedded broker.
See http://camel.apache.org/activemq.html for more information.
-->
<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
  <property name="brokerURL" value="failover:tcp://localhost:61616"/>
</bean>

<!-- Here is a sample which processes the input files
(leaving them in place - see the 'noop' flag), and
sends them on a JMS queue. This queue is watched by
another route which then performs content based
routing on the messages using XPath.
-->
<camelContext xmlns="http://camel.apache.org/schema/spring" id="camelContext">
  <routeBuilder ref="mSRouteBuilder" />
  <route>
    <from uri="file:src/data?noop=true"/>
    <to uri="activemq:personnel.records"/>
  </route>
  <route>
    <from uri="activemq:personnel.records"/>
    <choice>
      <when>
        <xpath>/person/city = 'London'</xpath>
        <to uri="file:target/messages/uk"/>
      </when>
      <otherwise>
        <to uri="file:target/messages/others"/>
      </otherwise>
    </choice>
  </route>
</camelContext>

<!-- THE GOOD STUFF STARTS HERE -->

<!-- This shows how to add a route to the CamelContext declaratively when there is no default constructor. -->
<bean id="mSRouteBuilder" class="com.example.camel.activemq.MSRouteBuilder">
  <constructor-arg index="0" value="file:src/data/1"/>
  <constructor-arg index="1" value="activemq:personnel.records"/>
  <constructor-arg index="2" value="true"/>
</bean>

<!-- This shows how to actually instantiate the routes using a list that can be obtained from anywhere.
After the properties are set, the init-method will be called on this bean.
This bean will not be instantiated until the beans declared in the "depends-on" attribute are instantiated. -->
<bean id="camelRouteManager" class="com.example.camel.activemq.MSCamelRouteManager"
  init-method="addDetectionRoutes" depends-on="dbDatasource camelContext postgres-ds">
  <property name="camelContext" ref="camelContext"/>
  <property name="directories" ref="directoryList"/>
  <property name="toURL" value="activemq:personnel.records"/>
  <property name="db" ref="postgres-ds"/>
</bean>

<!-- This bean will be used to create a datasource from a database to do the first initialization of the routes.
A Collection (List) will need to be constructed from the query done on the db. -->
<bean id="dbDatasource" class="java.lang.Object"/>

<bean id="postgres-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="org.postgresql.Driver" />
  <property name="url" value="jdbc:postgresql://localhost:5432/postgres" />
  <property name="username" value="postgres" />
  <property name="password" value="postgres" />
  <property name="poolPreparedStatements" value="true" />
</bean>

<!-- This bean shows how to declare a Collection using Spring. -->
<util:list id="directoryList" list-class="java.util.ArrayList" value-type="java.lang.String">
  <value>file:src/data/a</value>
  <value>file:src/data/b</value>
  <value>file:src/data/c</value>
  <value>file:src/data/d</value>
  <value>file:src/data/e</value>
  <value>file:src/data/f</value>
  <value>file:src/data/g</value>
  <value>file:src/data/h</value>
  <value>file:src/data/i</value>
  <value>file:src/data/j</value>
  <value>file:src/data/k</value>
  <value>file:src/data/l</value>
</util:list>

</beans>
